;;; General stuff

(define (not x) (if x #f #t))

(define (abs x) (if (negative? x) (- 0 x) x))

(define (sqr x) (* x x))

(define (identity x) x)

;;; Lists

(define (car (cons x y)) x)

(define (cdr (cons x y)) y)

(define (cadr (cons* x y z)) y)

(define (first x) (car x))

(define (rest x) (cdr x))

(define (append x y)
 (letrec ((loop
	   (lambda (x) (if (null? x) y (cons (first x) (loop (rest x)))))))
  (loop x)))

(define (length l) (if (null? l) 0 (+ (length (rest l)) 1)))

(define (list-ref l i) (if (zero? i) (first l) (list-ref (rest l) (- i 1))))

;;; Mapping and reduction

(define (map f l)
 (letrec ((loop (lambda (l)
		 (if (null? l) '() (cons (f (first l)) (loop (rest l)))))))
  (loop l)))

;;; needs work: To merge with map.
(define (map2 f l1 l2)
 (letrec ((loop (lambda (l1 l2)
		 (if (null? l1)
		     '()
		     (cons (f (first l1) (first l2))
			   (loop (rest l1) (rest l2)))))))
  (loop l1 l2)))

(define (map-n f n)
 (letrec ((loop
	   (lambda (n)
	    (if (zero? n) '() (append (loop (- n 1)) (list (f (- n 1))))))))
  (loop n)))

(define (reduce f i)
 (letrec ((loop (lambda (l) (if (null? l) i (f (first l) (loop (rest l)))))))
  loop))

;;; Vectors

(define (dot u v) ((reduce + 0) (map2 * u v)))

(define (v+ u v) (map2 + u v))

(define (v- u v) (map2 - u v))

(define (k*v k v) (map (lambda (x) (* k x)) v))

(define (magnitude-squared v) (dot v v))

(define (magnitude v) (sqrt (magnitude-squared v)))

;;; An n-dimensional vector with x in position i and zeros elsewhere.
(define (ex x i n)
 (letrec ((loop (lambda (i n)
		 (if (zero? n)
		     '()
		     (cons (if (zero? i) x 0) (loop  (- i 1) (- n 1)))))))
  (loop i n)))

;;; The ith n-dimensional basis vector.
(define (e i n) (ex 1 i n))

;;; Derivatives

(define ((derivative-using-j* f) x) (cadr (j* f x 1)))

(define ((derivative-using-*j f) x) (cadr (*j f x 1)))

(define (derivative f) (derivative-using-*j f))

(define ((gradient-using-j* f) x)
 (let ((n (length x))) (map-n (lambda (i) (cadr (j* f x (e i n)))) n)))

(define (gradient-using-*j f) (derivative-using-*j f))

(define (gradient f) (gradient-using-*j f))

;;; Roots and Optimization

(define (root f x epsilon)
 (let ((f-prime (derivative f)))
  (letrec ((loop (lambda (x)
		  (let ((x-prime (- x (/ (f x) (f-prime x)))))
		   (if (<= (abs (- x x-prime)) epsilon)
		       x
		       (loop x-prime))))))
   (loop x))))

;;; needs work: To rule out maxima and inflection points.
(define (argmin f x epsilon) (root (derivative f) x epsilon))

;;; needs work: To rule out minima and inflection points.
(define (argmax f x epsilon) (root (derivative f) x epsilon))

(define ((invert f) y) (root (lambda (x) (abs (- (f x) y))) 1 1e-5))

(define (gradient-descent-using-j*-j* f x epsilon)
 (let* ((del-f (gradient f))
	(line (lambda (x g k) (f (v+ x (k*v k g)))))
	(line-forward (j* line))
	(line-prime
	 (lambda (x g k)
	  (unperturb
	   (tangent
	    (line-forward
	     (bundle (cons* x g k) (perturb (cons* (zero x) (zero g) 1))))))))
	(line-prime-forward (j* line-prime))
	(line-prime-prime
	 (lambda (x g k)
	  (unperturb
	   (tangent
	    (line-prime-forward
	     (bundle (cons* x g k) (perturb (cons* (zero x) (zero g) 1)))))))))
  (letrec ((loop
	    (lambda (x)
	     (let ((g (del-f x)))
	      (letrec ((argmin (lambda (k)
				(let ((k-prime
				       (- k (/ (line-prime x g k)
					       (line-prime-prime x g k)))))
				 (if (<= (abs (- k k-prime)) epsilon)
				     k
				     (argmin k-prime))))))
	       (if (<= (magnitude g) epsilon)
		   x
		   (loop (v+ x (k*v (argmin 0) g)))))))))
   (loop x))))

(define (gradient-descent-using-j*-*j f x epsilon)
 (let* ((del-f (gradient f))
	(line (lambda (x g k) (f (v+ x (k*v k g)))))
	(line-forward (j* line))
	(line-prime
	 (lambda (x g k)
	  (unperturb
	   (tangent
	    (line-forward
	     (bundle (cons* x g k) (perturb (cons* (zero x) (zero g) 1))))))))
	(line-prime-reverse (*j line-prime))
	(line-prime-prime
	 (lambda (x g k)
	  (cdr
	   (cdr
	    (cdr (unsensitize ((cdr (line-prime-reverse (*j (cons* x g k))))
			       (sensitize 1)))))))))
  (letrec ((loop
	    (lambda (x)
	     (let ((g (del-f x)))
	      (letrec ((argmin (lambda (k)
				(let ((k-prime
				       (- k (/ (line-prime x g k)
					       (line-prime-prime x g k)))))
				 (if (<= (abs (- k k-prime)) epsilon)
				     k
				     (argmin k-prime))))))
	       (if (<= (magnitude g) epsilon)
		   x
		   (loop (v+ x (k*v (argmin 0) g)))))))))
   (loop x))))

(define (gradient-descent-using-*j-j* f x epsilon)
 (let* ((del-f (gradient f))
	(line (lambda (x g k) (f (v+ x (k*v k g)))))
	(line-reverse (*j line))
	(line-prime
	 (lambda (x g k)
	  (cdr (cdr (cdr (unsensitize ((cdr (line-reverse (*j (cons* x g k))))
				       (sensitize 1))))))))
	(line-prime-forward (j* line-prime))
	(line-prime-prime
	 (lambda (x g k)
	  (unperturb
	   (tangent
	    (line-prime-forward
	     (bundle (cons* x g k) (perturb (cons* (zero x) (zero g) 1)))))))))
  (letrec ((loop
	    (lambda (x)
	     (let ((g (del-f x)))
	      (letrec ((argmin (lambda (k)
				(let ((k-prime
				       (- k (/ (line-prime x g k)
					       (line-prime-prime x g k)))))
				 (if (<= (abs (- k k-prime)) epsilon)
				     k
				     (argmin k-prime))))))
	       (if (<= (magnitude g) epsilon)
		   x
		   (loop (v+ x (k*v (argmin 0) g)))))))))
   (loop x))))

(define (gradient-descent-using-*j-*j f x epsilon)
 (let* ((del-f (gradient f))
	(line (lambda (x g k) (f (v+ x (k*v k g)))))
	(line-reverse (*j line))
	(line-prime
	 (lambda (x g k)
	  (cdr (cdr (cdr (unsensitize ((cdr (line-reverse (*j (cons* x g k))))
				       (sensitize 1))))))))
	(line-prime-reverse (*j line-prime))
	(line-prime-prime
	 (lambda (x g k)
	  (cdr
	   (cdr
	    (cdr (unsensitize ((cdr (line-prime-reverse (*j (cons* x g k))))
			       (sensitize 1)))))))))
  (letrec ((loop
	    (lambda (x)
	     (let ((g (del-f x)))
	      (letrec ((argmin (lambda (k)
				(let ((k-prime
				       (- k (/ (line-prime x g k)
					       (line-prime-prime x g k)))))
				 (if (<= (abs (- k k-prime)) epsilon)
				     k
				     (argmin k-prime))))))
	       (if (<= (magnitude g) epsilon)
		   x
		   (loop (v+ x (k*v (argmin 0) g)))))))))
   (loop x))))

(define (gradient-descent f x epsilon)
 (gradient-descent-using-j*-j* f x epsilon))

;;; Matrices

(define (matrix-rows a) (length a))

(define (matrix-columns a) (length (list-ref a 0)))

(define (matrix-ref a i j) (list-ref (list-ref a i) j))

(define (matrix-row-ref a i) (list-ref a i))

(define (matrix-column-ref a j) (map (lambda (v) (list-ref v j)) a))

(define (vector->row-matrix v) (list v))

(define (vector->column-matrix v) (map (lambda (x) (list x)) v))

(define (m+ a b) (map2 v+ a b))

(define (m- a b) (map2 v- a b))

(define (m*v a v) (map (lambda (u) (dot u v)) a))

(define (transpose a)
 (map-n (lambda (j) (matrix-column-ref a j)) (matrix-columns a)))

(define (outer-product f u v)
 (map (lambda (ui) (map (lambda (vj) (f ui vj)) v)) u))

(define (self-outer-product f v) (outer-product f v v))

(define (m* a b) (outer-product dot a (transpose b)))

(define (v*m v a) (m* (vector->row-matrix v) a))

(define (k*m k m) (map (lambda (row) (map (lambda (e) (* k e)) row)) m))

(define (identity-matrix n) (map-n (lambda (i) (e i n)) n))
