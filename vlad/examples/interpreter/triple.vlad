(include "math")

(define (single0 f x) ((derivative-using-j* f) x))

(define (single1 f x) ((derivative-using-*j f) x))

(define (single f x) (list (single0 f x) (single1 f x)))

(define (double00 f x) ((derivative-using-j* (derivative-using-j* f)) x))

(define (double01 f x) ((derivative-using-*j (derivative-using-j* f)) x))

(define (double10 f x) ((derivative-using-j* (derivative-using-*j f)) x))

(define (double11 f x) ((derivative-using-*j (derivative-using-*j f)) x))

(define (double f x)
 (list (list (double00 f x) (double01 f x))
       (list (double10 f x) (double11 f x))))

(define (triple000 f x)
 ((derivative-using-j* (derivative-using-j* (derivative-using-j* f))) x))

(define (triple001 f x)
 ((derivative-using-*j (derivative-using-j* (derivative-using-j* f))) x))

(define (triple010 f x)
 ((derivative-using-j* (derivative-using-*j (derivative-using-j* f))) x))

(define (triple011 f x)
 ((derivative-using-*j (derivative-using-*j (derivative-using-j* f))) x))

(define (triple100 f x)
 ((derivative-using-j* (derivative-using-j* (derivative-using-*j f))) x))

(define (triple101 f x)
 ((derivative-using-*j (derivative-using-j* (derivative-using-*j f))) x))

(define (triple110 f x)
 ((derivative-using-j* (derivative-using-*j (derivative-using-*j f))) x))

(define (triple111 f x)
 ((derivative-using-*j (derivative-using-*j (derivative-using-*j f))) x))

(define (triple f x)
 (list (list (list (triple000 f x) (triple001 f x))
	     (list (triple010 f x) (triple011 f x)))
       (list (list (triple100 f x) (triple101 f x))
	     (list (triple110 f x) (triple111 f x)))))

(define (all-three f x) (list (single f x) (double f x) (triple f x)))

;;;(list (all-three sqrt 4)
;;;      (all-three (lambda (x) (+ x x)) 4)
;;;      (all-three (lambda (x) (car (cons x x))) 4))

(single0 sqrt 4)
(single1 sqrt 4)
(single0 (lambda (x) (+ x x)) 4)
(single1 (lambda (x) (+ x x)) 4)
(single0 (lambda (x) (car (cons x x))) 4)
(single1 (lambda (x) (car (cons x x))) 4)

(double00 sqrt 4)
(double01 sqrt 4)
(double10 sqrt 4)
(double11 sqrt 4)
(double00 (lambda (x) (+ x x)) 4)
(double01 (lambda (x) (+ x x)) 4)
(double10 (lambda (x) (+ x x)) 4)
(double11 (lambda (x) (+ x x)) 4)
(double00 (lambda (x) (car (cons x x))) 4)
(double01 (lambda (x) (car (cons x x))) 4)
(double10 (lambda (x) (car (cons x x))) 4)
(double11 (lambda (x) (car (cons x x))) 4)

(triple000 sqrt 4)
(triple001 sqrt 4)
(triple010 sqrt 4)
(triple011 sqrt 4)
(triple100 sqrt 4)
(triple101 sqrt 4)
(triple110 sqrt 4)
(triple111 sqrt 4)
(triple000 (lambda (x) (+ x x)) 4)
(triple001 (lambda (x) (+ x x)) 4)
(triple010 (lambda (x) (+ x x)) 4)
(triple011 (lambda (x) (+ x x)) 4)
(triple100 (lambda (x) (+ x x)) 4)
(triple101 (lambda (x) (+ x x)) 4)
(triple110 (lambda (x) (+ x x)) 4)
(triple111 (lambda (x) (+ x x)) 4)
(triple000 (lambda (x) (car (cons x x))) 4)
(triple001 (lambda (x) (car (cons x x))) 4)
(triple010 (lambda (x) (car (cons x x))) 4)
(triple011 (lambda (x) (car (cons x x))) 4)
(triple100 (lambda (x) (car (cons x x))) 4)
(triple101 (lambda (x) (car (cons x x))) 4)
(triple110 (lambda (x) (car (cons x x))) 4)
(triple111 (lambda (x) (car (cons x x))) 4)
